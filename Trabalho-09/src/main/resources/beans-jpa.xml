<?xml version="1.0" encoding="ISO-8859-1"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
             http://www.springframework.org/schema/beans/spring-beans.xsd 
             http://www.springframework.org/schema/context 
             http://www.springframework.org/schema/context/spring-context.xsd 
             http://www.springframework.org/schema/tx
             http://www.springframework.org/schema/tx/spring-tx.xsd
             http://www.springframework.org/schema/util
             http://www.springframework.org/schema/util/spring-util.xsd
             http://www.springframework.org/schema/aop 
			 http://www.springframework.org/schema/aop/spring-aop-3.0.xsd ">

	<bean id="agenciaAppService" class="service.AgenciaAppService">
<!-- 		<property name="agenciaDAO" ref="agenciaDAOImpl" /> -->
	</bean>
    
    <bean id="clienteAppService" class="service.ClienteAppService">
<!--     	<property name="clienteDAO" ref="clienteDAOImpl" /> -->
    </bean>
    
    <bean id="contaAppService" class="service.ContaAppService">
<!--     	<property name="contaDAO" ref="contaDAOImpl" /> -->
<!--     	<property name="agenciaDAO" ref="agenciaDAOImpl" /> -->
<!--     	<property name="clienteDAO" ref="clienteDAOImpl" /> -->
    </bean>
   
    <bean id="transferenciaAppService" class="service.TransferenciaAppService">
<!--     	<property name="transferenciaDAO" ref="transferenciaDAOImpl" /> -->
<!--     	<property name="contaDAO" ref="contaDAOImpl" /> -->
    </bean>
    
    <bean id="loginAppService" class="service.LoginAppService">
    	
    </bean>
    
    
    
<!--     <bean id="agenciaDAOImpl" class="dao.controle.FabricaDeDao" factory-method="getDao"> -->
<!-- 		<constructor-arg value="dao.impl.AgenciaDAOImpl" /> -->
<!--     </bean> -->
    
<!-- 	<bean id="contaDAOImpl" class="dao.controle.FabricaDeDao" factory-method="getDao"> -->
<!-- 		<constructor-arg value="dao.impl.ContaDAOImpl" /> -->
<!--     </bean> -->
    
<!--     <bean id="clienteDAOImpl" class="dao.controle.FabricaDeDao" factory-method="getDao"> -->
<!-- 		<constructor-arg value="dao.impl.ClienteDAOImpl" /> -->
<!--     </bean> -->
    
<!--     <bean id="transferenciaDAOImpl" class="dao.controle.FabricaDeDao" factory-method="getDao"> -->
<!-- 		<constructor-arg value="dao.impl.TransferenciaDAOImpl" /> -->
<!--     </bean> -->
    
    
    
    
    <context:component-scan base-package="dao.impl" />
    
    <aop:aspectj-autoproxy />

	<!-- Aspect -->
	<bean id="aspectoParaPerfil" class="aspecto.AspectoParaPerfil" />
	<bean id="aspectoParaLogDeErros" class="aspecto.AspectoParaLogDeErros" />
	<bean id="aspectoAround" class="aspecto.AspectoAround" />
<!--  
    Acrescentando  o  elemento  abaixo  será  registrado  automaticamente  um bean  do tipo 
    PersistenceAnnotationBeanPostProcessor   que  ficará   responsável   por   injetar   um 
    EntityManager diferente, a cada  nova transação, nas  classes do  tipo DAO que utilizam
    a anotação @PersistenceContext.
-->
    <context:annotation-config />

<!--  
    Aqui  é  preciso  declarar  uma  JpaTransactionManager  e  habilitar o gerenciamento de 
    transação de forma declarativa com os elementos abaixo.
 -->
    <tx:annotation-driven />
    
    <bean id="transactionManager"
        class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

<!-- 
    Spring  provê  um  fábrica denominada  LocalContainerEntityManagerFactoryBean, para que 
    se possa criar um objeto entity manager factory no container IoC. É preciso especificar 
    o  nome da  unidade de  persistência, o datasource que será  utilizado e o dialeto  SQL 
    a ser utilizado.

    Os dois elementos property abaixo foram  adicionados ao  elemento  entityManagerFactory   
    para  podermos  retirar  do  persistence.xml  as  configurações   de  configuração   do 
    datasource.
-->

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="exercicio" />
        <property name="packagesToScan" value="modelo" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />			
				<property name="showSql" value="true" />
			</bean>
		</property>
    </bean>

    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/banco?autoReconnect=true&amp;useSSL=false&amp;useTimezone=true&amp;serverTimezone=America/Sao_Paulo" />
        <property name="username" value="root" />
        <property name="password" value="Lucas1995" />
    </bean>
<!-- 
    Exception translation is still enabled by the use of the @Repository annotation on the DAO. 
    This annotation  enables a Spring  bean postprocessor to  advice all @Repository beans with 
    all the PersistenceExceptionTranslator  instances  found  in  the  Container  - and provide 
    exception translation just as before.
 -->
    <bean id="persistenceExceptionTranslationPostProcessor"
          class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

</beans>
